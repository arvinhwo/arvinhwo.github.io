<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SV常量与变量</title>
      <link href="/SV%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
      <url>/SV%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1>常量</h1><h2 id="全局"><a class="header-anchor" href="#全局">¶</a>全局</h2><ul><li><code>define</code>定义宏常量<ul><li>全局跨文件文本常量替换</li></ul></li></ul><h2 id="模块级"><a class="header-anchor" href="#模块级">¶</a>模块级</h2><ul><li><code>parameter</code>定义可重写模块级常量<ul><li>编译时常量，实例化时可被覆盖</li><li>支持表达式计算</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module RAM #(</span><br><span class="line">    parameter DEPTH = 1024,                      // 简单常量</span><br><span class="line">    parameter ADDR_WIDTH = $clog2(DEPTH),        // 表达式计算</span><br><span class="line">    parameter [7:0] INIT_VALUE = 8&#x27;hA5           // 带类型声明</span><br><span class="line">) (</span><br><span class="line">    input logic [ADDR_WIDTH-1:0] addrs</span><br><span class="line">);</span><br><span class="line">    localparam HIGH_BIT = ADDR_WIDTH - 1;        // 派生常量</span><br><span class="line">endmodule</span><br><span class="line"></span><br><span class="line">// 实例化时覆盖参数</span><br><span class="line">RAM #(.DEPTH(2048), .INIT_VALUE(8&#x27;hFF)) ram_inst();</span><br></pre></td></tr></table></figure><ul><li><code>localparam</code>定义不可重写模块级常量<ul><li>模块内部专用常量</li><li>不能被外部覆盖，常用于派生参数</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module ALU (</span><br><span class="line">    input logic [7:0] a, b</span><br><span class="line">);</span><br><span class="line">    localparam OP_ADD = 2&#x27;b00;            // 操作码常量</span><br><span class="line">    localparam OP_SUB = 2&#x27;b01;</span><br><span class="line">    localparam OP_AND = 2&#x27;b10;</span><br><span class="line">    </span><br><span class="line">    localparam RESULT_WIDTH = 9;          // 内部计算结果位宽</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="块、类级"><a class="header-anchor" href="#块、类级">¶</a>块、类级</h2><ul><li><code>const</code>定义运行时可初始化的常量<ul><li>可在类、函数、initial块中使用</li><li>需要显示初始化，初始化后不可变</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Packet;</span><br><span class="line">    const int MAX_SIZE;     // 声明</span><br><span class="line">    </span><br><span class="line">    function new(int size);</span><br><span class="line">        MAX_SIZE = size;    // 在构造函数中初始化</span><br><span class="line">    endfunction</span><br><span class="line">endclass</span><br><span class="line"></span><br><span class="line">initial begin</span><br><span class="line">    const real PI = 3.1415926;         // initial块常量</span><br><span class="line">    const byte START_ADDR = 8&#x27;h40;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="枚举常量"><a class="header-anchor" href="#枚举常量">¶</a>枚举常量</h2><ul><li><code>typedef enum</code>定义枚举常量<ul><li>用于定义状态机、命令码等有限值集合</li><li>自动或手动赋值，提高代码可读性</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef enum logic [2:0] &#123;       // 显式指定底层类型</span><br><span class="line">    IDLE  = 3&#x27;b001,              // 手动赋值</span><br><span class="line">    START = 3&#x27;b010,</span><br><span class="line">    RUN   = 3&#x27;b100,</span><br><span class="line">    ERROR = 3&#x27;b111</span><br><span class="line">&#125; state_t;</span><br><span class="line"></span><br><span class="line">typedef enum &#123;                   // 自动赋值</span><br><span class="line">    RED,    // 0</span><br><span class="line">    GREEN,  // 1</span><br><span class="line">    BLUE    // 2</span><br><span class="line">&#125; color_t;</span><br></pre></td></tr></table></figure><h2 id="常量函数"><a class="header-anchor" href="#常量函数">¶</a>常量函数</h2><ul><li>用于复杂计算生成常量值</li><li>在编译时求值，只能包含常量表达式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function automatic int clog2(input int n);</span><br><span class="line">    return (n &lt;= 1) ? 0 : 1 + clog2(n &gt;&gt; 1);</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">parameter MEM_SIZE = 4096;</span><br><span class="line">localparam ADDR_W = clog2(MEM_SIZE); // 计算结果为常量</span><br></pre></td></tr></table></figure><h1>静态变量</h1><h2 id="声明"><a class="header-anchor" href="#声明">¶</a>声明</h2><ul><li>隐式静态变量：模块级变量默认为静态类型</li><li>显示静态变量：使用<code>static</code>关键词显式声明</li></ul><h2 id="特性"><a class="header-anchor" href="#特性">¶</a>特性</h2><ul><li>存储在全局数据区，固定内存位置</li><li>同一个模块多次实例化时共享静态变量</li><li>适用场景<ul><li>模块级配置参数</li><li>硬件寄存器建模</li><li>时序逻辑总是使用静态变量保持状态<ul><li>如跨多个时钟周期保持值的计数器</li></ul></li><li>跨时间控制语句的变量</li></ul></li></ul><h2 id="生命周期"><a class="header-anchor" href="#生命周期">¶</a>生命周期</h2><ul><li>从仿真开始（时间0）持续到仿真结束</li><li>在多次触发的过程块中，只在仿真时间为0时进行一次初始化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module</span><br><span class="line">always_ff @(posedge clk) begin</span><br><span class="line">    static int count = 0;  // 仅仿真开始时初始化为0，声明并非执行语句，后续不再重复初始化</span><br><span class="line">    count &lt;= count + 1;    // 每次触发递增</span><br><span class="line">end   // 输出序列：1, 2, 3...（非0,1,2...）</span><br><span class="line">   </span><br><span class="line">// 等效硬件行为</span><br><span class="line">reg [31:0] counter = 0;  // 综合为带初始值的寄存器</span><br><span class="line">always @(posedge clk) begin</span><br><span class="line">  counter &lt;= counter + 1;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1>自动变量</h1><h2 id="声明-v2"><a class="header-anchor" href="#声明-v2">¶</a>声明</h2><ul><li>隐式自动变量：过程块、子程序中声明变量默认为自动变量</li><li>过程块：initial, 通用always, 时序逻辑always_ff, 组合逻辑always_comb</li><li>子程序：task, function</li><li>显示自动变量：使用<code>automatic</code>关键词显示声明</li></ul><h2 id="特性-v2"><a class="header-anchor" href="#特性-v2">¶</a>特性</h2><ul><li>存储在栈帧中，动态分配内存</li><li>多实例独立，每次调用创建独立副本</li><li>适用场景<ul><li>纯计算逻辑中使用自动变量</li><li>递归函数必须使用自动变量</li><li>不需要保持状态的中间变量</li><li>验证环境中的临时对象</li></ul></li></ul><h2 id="生命周期-v2"><a class="header-anchor" href="#生命周期-v2">¶</a>生命周期</h2><ul><li>仅在作用域激活期间存在</li><li>每次进入作用域时重新初始化</li><li>作用域结束时销毁</li><li><code>initial</code>中的自动变量可能在进程挂起后被回收，根据仿真器调度选项而定</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">always_ff @(posedge clk) begin</span><br><span class="line">    int count = 0;         // 错误：隐式自动变量</span><br><span class="line">    count &lt;= count + 1;    // 永远输出1</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">task calculate();</span><br><span class="line">    automatic int temp = 0;  // 每次调用时初始化为0</span><br><span class="line">    temp++;</span><br><span class="line">    $display(temp);  // 总是显示1</span><br><span class="line">endtask</span><br><span class="line"></span><br><span class="line">initial begin</span><br><span class="line">  automatic int delay = 10;</span><br><span class="line">  #delay;  // 挂起delay个时间单位</span><br><span class="line">  // 调度器计划在($time + &amp;delay)时唤醒这个进程</span><br><span class="line">  // 这里&amp;delay为delay的内存位置，而非实际值</span><br><span class="line">  // 如果delay已被回收，仿真器可能无法确定何时唤醒</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>SystemVerilog使用事件驱动调度模型</li></ul><img src="/images/export_bcqi6.png" alt="initiao调度" style="zoom: 33%;" />]]></content>
      
      
      <categories>
          
          <category> 芯片验证 </category>
          
          <category> SystemVerilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPI框架</title>
      <link href="/MIPI%E6%A1%86%E6%9E%B6/"/>
      <url>/MIPI%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1>MIPI概述</h1><h2 id="MIPI简介"><a class="header-anchor" href="#MIPI简介">¶</a>MIPI简介</h2><ul><li><p><a href="www.mipi.org">MIPI联盟</a>（Mobile Industry Processor Interface Alliance，移动产业处理器接口联盟）是2003年由ARM、Nokia、意法半导体（ST）、德州仪器（TI）等公司成立的一个联盟</p><ul><li>成员规模超350家，覆盖芯片厂商、终端品牌、汽车制造商、测试机构</li><li>99%的智能手机使用至少3项MIPI标准（CSI-2 + DSI + I3C）</li></ul></li><li><p>MIPI协议把移动设备内部的接口如摄像头、显示屏、基带、射频接口等标准化，以减少设计的复杂度、提高设备的性能、同时降低功耗和成本</p><ul><li>MIPI并非单一接口或协议，而是包含一套协议和标准，以满足各种子系统的要求<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li></ul></li></ul><h2 id="MIPI框架"><a class="header-anchor" href="#MIPI框架">¶</a>MIPI框架</h2><p>MIPI框架主要包含四个方面的协议</p><ul><li>多媒体（Multimedia）：面向功能，每种多媒体协议栈通常又由三个层次构成<ul><li>应用层（Application Layer）：直接面向用户的顶层协议</li><li>协议层（Protocol/Link Layer）：定义数据包结构、流控、错误校验等逻辑传输机制</li><li>物理层（Multimedia-PHY Layer）：负责电气信号传输、时钟同步和物理连接</li></ul></li><li>控制与数据（Control &amp; Data）：功能使能层，构成控制网络，实现子系统协同<ul><li>纵向：提供从控制逻辑到物理层的控制链</li><li>横向：串联多媒体、存储、调试等子系统</li><li>效能：通过RFFE单线制、I3C多主控等专用优化，降低功耗/面积/延迟</li></ul></li><li>芯片间互联（Chip-to-Chip\IPC, Inter Process Communications）：通过高速、标准化、低延时实现异构芯片（如APU/GPU/Modem）的高效协同，同样分为几个层级<ul><li>物理层：使用更高速率的M-PHY，或抗干扰更强的A-PHY</li><li>协议层：UniPro，流控与错误恢复，类比TCP/IP的可靠性机制</li><li>接口抽象层：HCI，统一管理UniPro和M-PHY的软件API，配置链路状态、功耗模式</li><li>场景化应用协议：如AP-Modem专用低延迟通道LLI等，绕开协议栈开销</li></ul></li><li>调试与追踪（Debug &amp; Trace），提供全流程覆盖的协议支持，并且不干扰功能</li></ul><img src="/images/image-20250711094554653.png" alt="image-20250711094554653" style="zoom:50%;" /><blockquote><p>GNSS：Global Navigation Satellite System，全球导航卫星系统<br>Codec：Coder-Decoder，编解码器<br>FM Radio：Frequency Modulation Radio，调频广播<br>ETPS：Embedded Test and Programming Support<br>eTrak：实时调试与数据追踪<br>Cellular：蜂窝<br>LNA：Low Noise Amplifier，低噪声放大器<br>Antenna Tuner：天线调谐器</p></blockquote><h2 id="MIPI协议"><a class="header-anchor" href="#MIPI协议">¶</a>MIPI协议</h2><h3 id="多媒体"><a class="header-anchor" href="#多媒体">¶</a>多媒体</h3><img src="/images/image-20250711145624735.png" alt="image-20250711145624735" style="zoom:50%;" /><ul><li><p>CSI-2 (Camera Serial Interface 2): 高速摄像头串行接口，主流手机/车载摄像头传输协议</p></li><li><p>D-PHY: 差分串行物理层，CSI-2 和 DSI 常用的低成本物理层</p><ul><li>最低配置：1对数据线+1对时钟线</li><li>使用基于差分信号的NRZ编码</li></ul></li><li><p>C-PHY: C表示Clock-less，较D-PHY有更高带宽效率的物理层，常用于 CSI-2 和 DSI</p><ul><li>无需额外布置时钟线，3线制（Triplet）每通道</li><li>使用3-phase符号编码，嵌入时钟信息</li></ul></li><li><p>DSI (Display Serial Interface): 高速显示屏串行接口，用于手机/平板等屏幕驱动</p></li><li><p>CSI-3: 新一代摄像头接口，基于MIPI M-PHY或C-PHY，扩展性更强（如车用多摄像头）</p></li><li><p>SLIMbus (Serial Low-power Inter-chip Media Bus): 数字音频数据传输总线</p></li><li><p>SoundWire: 新一代数字音频接口，简化布线，替代SLIMbus</p></li></ul><blockquote><p>SLIMbus/SoundWire 是完整协议栈（含应用层+协议层+物理层），物理层非D/C-PHY</p></blockquote><h3 id="控制与数据"><a class="header-anchor" href="#控制与数据">¶</a>控制与数据</h3><img src="/images/image-20250711145606842.png" alt="image-20250711145606842" style="zoom:50%;" /><ul><li>I3C (Improved Inter-Integrated Circuit): 革命性传感器控制总线/改进型I2C，融合I2C/SPI/UART优点，高速、低功耗、多主控，用于陀螺仪/加速度计传感器控制、电源管理</li><li>I3C Basic: I3C 的子集，低成本、简化版传感器控制总线</li><li>RFFE (RF Front-End Control Interface): 射频前端控制接口，制手机天线开关、功率放大器</li><li>SPMI (System Power Management Interface): 处理器与外设间的电源管理通信协议</li><li>SSIC (SuperSpeed Inter-Chip): 基于USB 3.0的芯片间高速数据传输协议</li></ul><blockquote><p>I3C 因同时涵盖高效控制与简化调试，横跨 Control &amp; Data 和 Debug &amp; Trace 领域</p></blockquote><h3 id="芯片间互联"><a class="header-anchor" href="#芯片间互联">¶</a>芯片间互联</h3><img src="/images/image-20250711150529204.png" alt="image-20250711150529204" style="zoom:50%;" /><ul><li>M-PHY: 高速、可扩展物理层，用于芯片间或板间互连（如UFS存储接口）</li><li>UniPro (Unified Protocol): 基于M-PHY的应用层协议，构建通用芯片互连（如UFS）</li><li>LLI (Low Latency Interface): 应用处理器与调制解调器间超低延迟通信接口</li><li>HCI (HYBRID Command Interface): 管理 UniPro 和 M-PHY 栈的通用接口</li><li>DigRF: （已被后续协议替代）早期基带与射频芯片间数字接口</li><li>A-PHY (Automotive SerDes PHY): 长距离、高抗扰车规级高速物理层（用于车载摄像头/显示屏互连）</li></ul><h3 id="控制与调试"><a class="header-anchor" href="#控制与调试">¶</a>控制与调试</h3><ul><li>SDBI (Serial Debug Bus Interface): 基于I3C的低引脚数调试接口</li><li>STP (System Trace Protocol): 跨多核系统的软件跟踪协议</li><li>TWP (Trace Wrapper Protocol): 封装不同跟踪源数据的协议</li><li>MTB (MIPI Trace Buffer): 低成本片上跟踪缓冲区规范</li><li>PTI (Parallel Trace Interface): 替代传统并行调试接口的标准</li><li>BIST (Built-In Self Test): 集成自测试框架（如CSI-2 TX/RX测试）</li><li>SYS-T (System Trace): 定义时间戳和系统事件格式的框架</li><li>NIDnT (Non-Intrusive Debug and Trace): 用于I3C的非侵入式调试规范</li></ul><h1>MIPI CSI-2</h1><p><img src="/images/image-20250711114740490.png" alt="image-20250711114740490"></p><h2 id="协议概述"><a class="header-anchor" href="#协议概述">¶</a>协议概述<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2><ul><li><p>CSI协议旨在为高清摄像头和应用处理器之间提供一个高速的串行接口</p></li><li><p>目前常见的摄像头接口协议有CSI-2、USB3.0、DVP，相比DVP接口和USB3.0接口，CSI-2接口在图像数据的传输性能上拥有明显的优势<br><img src="/images/image-20250711152614939.png" alt="image-20250711152614939"></p><ul><li><p>串行传输</p><ul><li>使用的数据线相对较少，并且CSI-2一般采用双线差分传输 （D-PHY）</li><li>噪声同时加载到并行传输的两条差分线可以相互抵消，具有更强的抗干扰能力</li></ul></li><li><p>校验编码</p><ul><li>ECC能够监测2bit以内的数据出错和纠正1bit的数据出错</li><li>CRC能够监测多bit的数据出错，使CSI-2接口对数据传输具备更高容错</li></ul></li><li><p>功耗与传输速率</p><ul><li><p>CSI-2接口支持高速(HS)与低功耗(LP)两种模式协同工作</p></li><li><p>高速模式下使用 0.2V 低压差分电压，用于传输图像数据，其传输速度范围在</p><p>80Mbps 至 1000Mbps</p></li><li><p>低功耗模式下使用 12V 差分电压，用于传输控制命令，最高传输速度为 10Mbps</p></li><li><p>接口在正常工作时，会在一次高速模式传输后插入低功耗模式，两种模式相互切换使得 CSI-2接口同时兼顾了低功耗需求</p></li></ul></li></ul></li></ul><h2 id="总体框架"><a class="header-anchor" href="#总体框架">¶</a>总体框架</h2><p><img src="/images/image-20250711154506468.png" alt="image-20250711154506468"></p><ul><li>应用层：面向用户，可在应用层中实现对原始图像数据进行高级编码以及处理各种算法</li><li>协议层：由以下层级构成<ul><li>像素与字节的组包层：在发送端中，组包层负责将来自应用层的图片像素信息打包成为字节，然后输送至低级协议层中</li><li>解包层：在接收端中，解包层将来自低级协议层中的字节解压并还原，然后将数据流传输至接收端应用层</li><li>低级协议层：对起始指令SoT和终止指令SoT之间串行数据建立bit级和byte级同步，并将数据传输至下一层，包含对大小端的控制</li><li>通道管理层：数据通道的数量可以根据带宽需求进行选择，在发送端，接口将字节分发到一个或多个通道；在接收端，接口从通道中收集字节并将其合并重组，恢复出原始的数据流</li></ul></li><li>物理层：规范了传输媒介，电气特性，I/O电路以及bit级和byte级的同步机制，支持High-Speed模式和Low-Power模式，所有功能最终映射为：<ul><li>模拟电路：差分放大器、压控振荡器VCO、比较器</li><li>数字电路：移位寄存器、状态机、FIFO</li><li>无源器件：终端电阻、电容（AC耦合）</li></ul></li></ul><p><img src="/images/image-20250711171639524.png" alt="image-20250711171639524"></p><h2 id="数据包格式"><a class="header-anchor" href="#数据包格式">¶</a>数据包格式</h2><ul><li>用于CSI-2中D-PHY物理层的数据包可以分为长数据包和短数据包</li></ul><h3 id="长数据包"><a class="header-anchor" href="#长数据包">¶</a>长数据包</h3><p><img src="/images/image-20250711161101845.png" alt="image-20250711161101845"></p><ul><li>长数据包格式如上图所示，由三个部分组成<ul><li>32bit数据包头（PH），并由以下部分构成<ul><li>8bit数据标识符号（DI, Data Identifier）：由bit7-6的虚拟通道和bit5-0的数据类型构成</li><li>16bit字计数值（WC, Word Count）：统计长数据包的字节数，在有需要的情况表示第几帧或是第几行</li><li>8bit VCX+ECC校验位：由bit7-6的虚拟通道扩展位和bit5-0的ECC校验位构成</li></ul></li><li>有效载荷：具有可变字节数量的专用数据</li><li>16bit数据包页脚（PF）：即16bit CRC校验位</li></ul></li></ul><h3 id="短数据包"><a class="header-anchor" href="#短数据包">¶</a>短数据包</h3><p><img src="/images/image-20250711161111820.png" alt="image-20250711161111820"></p><ul><li>短数据包结构如上图所示，与长数据包结构相似，不同之处在于<ul><li>短数据包只包含有一个数据包头，数据包填充字段和数据包尾均不存在</li></ul></li></ul><h2 id="CCI接口"><a class="header-anchor" href="#CCI接口">¶</a>CCI接口</h2><h3 id="多速率模式"><a class="header-anchor" href="#多速率模式">¶</a>多速率模式</h3><ul><li>CCI，即摄像头控制接口，用于配置发送端口，使用两线接口（时钟线 SCL 和数据线 SDA），并具有半双工，串行的特点，兼容I2C协议，支持多速率模式<ul><li>传统I2C兼容模式（FM, Fast Mode）：400 Kbps<ul><li>开漏输出：只能依赖NMOS主动拉低电平，依赖外部上拉电阻Rp</li><li>数据采样点位于SCL高电平中点</li></ul></li><li>增强I2C模式（FM+, Fast Mode）：1 Mbps<ul><li>推挽输出（Push-Pull Output）：由PMOS上拉管 + NMOS下拉管组成互补输出级（Totem Pole，图腾柱），不再依赖Rp</li><li>上升速度更快（PMOS导通决定），抗干扰更强（主动驱动低阻），但功耗更高（开关瞬态功耗）</li></ul></li><li>单数据模式（SDR，I3C专用）12.5 Mbps<ul><li>单边沿触发器：SCL上升沿锁存SDA数据</li></ul></li><li>双数据模式（DDR，I3C专用）25 Mbps<ul><li>双边沿触发器：SCL上升沿/下降沿各锁存1 bit</li></ul></li></ul></li></ul><h3 id="数据结构"><a class="header-anchor" href="#数据结构">¶</a>数据结构</h3><ul><li>CCI数据传输协议遵循I2C规范，其读写结构如下图所示</li></ul><p><img src="/images/image-20250711170045936.png" alt="image-20250711170045936"></p><p><img src="/images/image-20250711170100702.png" alt="image-20250711170100702"></p><h2 id="CSI-2接口模型"><a class="header-anchor" href="#CSI-2接口模型">¶</a>CSI-2接口模型</h2><ul><li>CSI-2规范定义了发送端和接收端的协议和控制接口CCI，可选择D-PHY或C-PHY物理层作为高速串行数据的传输接口选项</li><li>C-PHY和D-PHY在物理连接上存在多处不同，主从机必须使用同一种物理层<ul><li>C-PHY具备更高的传输速率，但只支持CSI-2</li><li>D-PHY同时支持CSI-2和DSI，具备更高兼容性</li></ul></li></ul><p><img src="/images/image-20250711170601360.png" alt="image-20250711170601360"></p><blockquote><p>一般情况下，对低于五百万像素的摄像头只需使用两对差分数据线，即两条数据通道</p></blockquote><h1>MIPI DSI</h1><ul><li>DSI协议栈从框架上来看和CSI类似，并且能够实现摄像头-处理器-屏幕的功能组合</li></ul><img src="/images/1646035937837020.png" alt="img" style="zoom: 80%;" /><h2 id="协议概述-v2"><a class="header-anchor" href="#协议概述-v2">¶</a>协议概述<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h2><p><img src="/images/image-20250711174305103.png" alt="image-20250711174305103"></p><ul><li>DSI 定义了主机处理器与显示外设之间传输图像和指令的接口协议</li><li>它采用了MIPI 联盟已有的 DPI-2、DBI-2 定义的像素格式，和 DCS 定义的命令集标准</li></ul><blockquote><ul><li>DPI-2 (Display Pixel Interface 2)<ul><li>显示控制器（Source）到显示面板（Sink）的并行像素流格式协议</li><li>用于直连型显示驱动，无需帧缓存，如MCU直接驱动LCD屏</li></ul></li><li>DBI-2 (Display Bus Interface 2)<ul><li>基于显示缓存的命令/数据总线协议，具备两种操作模式<ul><li>Command Mode：发送配置命令，如初始化序列</li><li>Video Mode：写入帧缓存数据，像素刷新</li></ul></li><li>面板内置帧存，如手机AMOLED屏</li></ul></li><li>DCS (Display Command Set)<ul><li>显示面板的初始化与控制指令集协议，适用于DBI-2/DSI接口</li><li>统一不同面板厂商的驱动代码</li></ul></li></ul></blockquote><h2 id="框架模型"><a class="header-anchor" href="#框架模型">¶</a>框架模型</h2><ul><li>DSI的框架与CSI类似，同样分为了应用层、协议层和物理层</li></ul><p><img src="/images/image-20250711174126995.png" alt="image-20250711174126995"></p><h2 id="DCS命令集简介"><a class="header-anchor" href="#DCS命令集简介">¶</a>DCS命令集简介</h2><ul><li>DCS是用于实现DSI和DBI-2协议的命令集<ul><li>主机处理器通过向显示模块发送命令，可以写入图像数据、配置显示模块工作状态或读取显示状态和数据</li><li>在显示端，显示控制器接收并解析命令，根据命令执行相应的操作</li></ul></li><li>DCS命令按照类型可以分短命令和长命令，前者不包含或只包含一个参数，后者包含多个参数</li><li>按照功能可分为制造商命令集和用户命令集<ul><li>制造商命令集是一种设备相关的协议，用于为出厂设备写入默认参数，设备配置完成出厂后，该命令集应被禁止，显示设备不再响应此命令集的命令</li><li>用户命令集是一种设备无关的协议，用于操作系统的硬件抽象层，下图位常用DCS用户命令集</li></ul></li></ul><p><img src="/images/image-20250711174737174.png" alt="image-20250711174737174"></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/DRubioG/MIPI_Specification#">MIPI Specs</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>陈锐弦.基于FPGA和MIPI CSI-2的双摄像头图像采集系统设计[D].西安电子科技大学,2021. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>张豪.基于FPGA的MIPI-DSI发送接口设计与实现[D].华中科技大学,2019. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 知识储备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIPI </tag>
            
            <tag> CSI-2 </tag>
            
            <tag> DSI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog搭建</title>
      <link href="/Blog%E6%90%AD%E5%BB%BA/"/>
      <url>/Blog%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1>Git-GitHub</h1><h2 id="安装Git"><a class="header-anchor" href="#安装Git">¶</a>安装Git</h2><ul><li><p>简介</p><ul><li>Git 是分布式版本控制工具，核心价值在于高效管理代码变更、支持离线协作与灵活分支策略</li><li>对比集中式系统（如 SVN），安全性更高（本地即备份）且协作更灵活</li></ul></li><li><p>下载</p><ul><li><a href="https://git-scm.com/downloads/win">Download</a><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li></ul></li></ul><h2 id="绑定GitHub"><a class="header-anchor" href="#绑定GitHub">¶</a>绑定GitHub</h2><ul><li>利用SSH来完成GitHub的绑定并提交文件</li><li>SSH专为会话和其他网络服务提供安全性的协议，加密压缩数据、加快传输速度<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li></ul><h3 id="SSH密钥"><a class="header-anchor" href="#SSH密钥">¶</a>SSH密钥</h3><ul><li><p>右键打开Git Bash，输入<code>ssh</code>查看本机是否安装SSH</p></li><li><p>输入<code>ssh-keygen -t rsa</code>生成<code>RSA</code>算法公钥和私钥，若成功则打印公钥指纹</p></li></ul><img src="/images/image-20250709141654216.png" alt="image-20250709141654216" style="zoom:50%;" /><blockquote><p>公钥指纹是公钥的哈希值，用于快速验证服务器身份</p></blockquote><h3 id="绑定GitHub-v2"><a class="header-anchor" href="#绑定GitHub-v2">¶</a>绑定GitHub</h3><ul><li>Git Bash中输入<code>cat ~/.ssh/id_rsa.pub</code>打印并复制公钥</li><li>登录 GitHub → Settings → <strong>SSH and GPG Keys</strong> → New SSH Key</li><li>Git Bash中输入<code>ssh -T git@github.com</code>，若打印信息<code>You've successfully authenticated</code>则绑定成功</li></ul><h2 id="Git仓库"><a class="header-anchor" href="#Git仓库">¶</a>Git仓库</h2><h3 id="本地下载"><a class="header-anchor" href="#本地下载">¶</a>本地下载</h3><ul><li>进入GitHub仓库复制HTTPS协议或SSH协议的下载链接</li></ul><img src="/images/image-20250709141636991.png" alt="image-20250709141636991" style="zoom: 33%;" /><ul><li>Git Bash中输入<code>git clone &lt;url&gt;</code>，获取远程仓库到本地仓库（工作区）<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li></ul><img src="/images/image-20250709142631646.png" alt="image-20250709142631646" style="zoom: 50%;" /><ul><li>在<code>git clone &lt;url&gt;</code>中集成了多步操作<ul><li>本地新建远程仓库目录</li><li>初始化仓库：<code>git init</code></li><li>添加远程地址：<code>git remote add origin &lt;url&gt;</code></li><li>获取远程数据：<code>git fetch origin</code></li><li>自动检出默认分支：<code>git checkout main</code></li></ul></li></ul><blockquote><p>分支操作<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><ul><li>检出默认分支：自动设置默认分支（Branch）为当前工作主线，其他分支隐藏</li><li>clone时所有分支均会被下载，默认分支一般被命名为main或者master</li><li>新建分支一般用于新功能开发、修复bug或多人协作，避免直接在主线上进行修改</li></ul></blockquote><h3 id="文件追踪"><a class="header-anchor" href="#文件追踪">¶</a>文件追踪</h3><ul><li>进入工作区新建文件后，可使用<code>git status</code>查看仓库状态</li><li>使用<code>git add &lt;file&gt;</code>或<code>git add -A</code>将未被追踪的文件添加到临时缓冲区</li></ul><img src="/images/image-20250709142821701.png" alt="image-20250709142821701" style="zoom:50%;" /><blockquote><p>使用<code>git rm -cached &lt;file&gt;</code>移除追踪但保留文件</p></blockquote><h3 id="提交变更"><a class="header-anchor" href="#提交变更">¶</a>提交变更</h3><ul><li>使用<code>git commit -am &quot;msg of update&quot;</code>将修改提交至本地仓库<ul><li>此操作会更新本地.git目录，是上传远程前的必要步骤</li><li>完成后可使用<code>git log</code>查看本次更新的提交信息及哈希值</li></ul></li><li>使用<code>git push origin main</code>将本地仓库提交至远程仓库<ul><li>origin是远程主机的名字</li><li>main是默认分支</li></ul></li></ul><img src="/images/image-20250709142916006.png" alt="image-20250709142916006" style="zoom:50%;" /><blockquote><p>首次提交需添加邮箱信息，后续修改邮箱信息也可使用以下命令</p><ul><li><code>git config --global user.email &quot;your@email.com&quot;</code></li><li><code>git config --global user.email &quot;your name&quot;</code></li></ul></blockquote><h1>Hexo框架</h1><h2 id="安装node-js"><a class="header-anchor" href="#安装node-js">¶</a>安装node.js</h2><blockquote><p>Node.js 是一个开源的、跨平台的 <strong>JavaScript 运行时环境</strong>，用于在服务器端执行 JavaScript 代码</p></blockquote><ul><li>下载<a href="https://nodejs.org/en/">node.js</a><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></li><li>在命令行中使用<code>node -v</code>和<code>npm -v</code>检查是否成功安装</li></ul><p><img src="/images/image-20250709142934524.png" alt="image-20250709142934524"></p><h2 id="Hexo部署"><a class="header-anchor" href="#Hexo部署">¶</a>Hexo部署</h2><blockquote><p>Hexo 是一个基于 Node.js 的静态博客框架， 能够将Markdown 文档快速渲染成静态的 HTML 网页<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p></blockquote><h3 id="本地部署"><a class="header-anchor" href="#本地部署">¶</a>本地部署</h3><ul><li>在目标位置打开Git Bash，使用<code>npm install -g hexo-cli</code>安装Hexo<ul><li>输入<code>hexo init</code>初始化博客</li><li>输入<code>hexo g</code>静态部署（hexo generate）</li><li>输入<code>hexo s</code>开始进程（hexo server）</li></ul></li></ul><p><img src="/images/image-20250709143108331.png" alt="image-20250709143108331"></p><ul><li>打开网页 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看，Git Bash中使用<code>ctrl</code>+<code>c</code>停止运行</li></ul><img src="/images/image-20250709143123112.png" alt="image-20250709143123112" style="zoom:50%;" /><h3 id="GitHub部署"><a class="header-anchor" href="#GitHub部署">¶</a>GitHub部署</h3><ul><li>创建一个.github.io的仓库</li></ul><img src="/images/image-20250709143245133.png" alt="image-20250709143245133" style="zoom:50%;" /><ul><li>编辑Blog中的_config.yml文件，添加GitHub部署地址</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:arvinhwo/arvinhwo.github.io.git</span>  <span class="comment"># your url</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ul><li><p>输入<code>npm install hexo -deployer-git --save</code>安装Git插件</p><ul><li>输入<code>hexo clean</code>清除缓存文件db.json和静态文件public</li><li>输入<code>hexo g</code>生成网站静态文文件</li><li>输入<code>hexo d</code>部署到指定仓库（hexo deploy）</li></ul></li><li><p>部署完成后，打开网页 <a href="https://arvinhwo.github.io/">https://arvinhwo.github.io/</a> 查看</p></li></ul><h3 id="解析域名"><a class="header-anchor" href="#解析域名">¶</a>解析域名</h3><ul><li>使用<code>ping your.github.io -4</code>获取GitHub服务器的IPV4地址</li></ul><img src="/images/image-20250709143406082.png" alt="image-20250709143406082" style="zoom:67%;" /><ul><li>在已购域名的控制台中添加github.io的解析记录，经CDN服务商加速访问</li></ul><img src="/images/image-20250709143416072.png" alt="image-20250709143416072" style="zoom: 67%;" /><ul><li><p>在Blog\source路径中添加CNAME文件，存入域名arvinhwo.com后，依次以下命令重新部署</p><ul><li><code>hexo clean</code></li><li><code>hexo g</code></li><li><code>hexo d</code></li></ul></li><li><p>打开GitHub检查CNAME是否被正确设置</p></li><li><p>浏览器输入域名 <a href="http://arvinhwo.com">arvinhwo.com</a> 进入</p></li></ul><h3 id="草稿发布"><a class="header-anchor" href="#草稿发布">¶</a>草稿发布</h3><ul><li>建立文章草稿<code>hexo new draft &lt;filename&gt;</code><ul><li>将新文章建立在source/_drafts目录</li><li><code>hexo generate</code>不编译到public目录下</li><li><code>hexo deploy</code>也不部署到GitHub中</li></ul></li><li>本机预览草稿<code>hexo s --draft</code><ul><li>不影响再次<code>hexo s</code>生成的预览内容</li></ul></li><li>草稿发表<code>hexo p &lt;filename&gt;</code><ul><li>将文章从source/draft移动到source/posts</li></ul></li></ul><h2 id="NEXT主题"><a class="header-anchor" href="#NEXT主题">¶</a>NEXT主题<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></h2><h3 id="菜单设置"><a class="header-anchor" href="#菜单设置">¶</a>菜单设置</h3><ul><li>打开themes/next目录下的主题配置文_config.yml，查找menu</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span> <span class="comment">#||前面是目标连接，后面是图标名称</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span> <span class="comment">#首页</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user#关于</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span><span class="comment">#标签</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span><span class="comment">#分类</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span><span class="comment">#归档</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar#日历</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap#站点地图，供搜索引擎爬取</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat#公益404</span></span><br></pre></td></tr></table></figure><ul><li>根目录下使用命令在source中建立文件夹<ul><li><code>hexo new page &quot;categories&quot;</code></li><li><code>hexo new page &quot;tags&quot;</code></li></ul></li><li>修改所生成文件夹中的index.md文件自定义标题</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-07-09 11:44:14</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="头像图标"><a class="header-anchor" href="#头像图标">¶</a>头像图标</h3><ul><li>在主题配置文件中搜索avatar设置头像</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/A.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>搜索favicon设置图标，<a href="https://www.iconfont.cn/">图标素材网站</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-A.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-A.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/favicon-A.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><h3 id="版权说明"><a class="header-anchor" href="#版权说明">¶</a>版权说明</h3><ul><li>在主题配置文件中查找creative_commons选择协议</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">deed.zh</span></span><br></pre></td></tr></table></figure><ul><li>也可在页脚配置文件 themes\next\layout_partial\footer.swig中添加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;copyright&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;版权声明：本博客采用&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">a</span> href=&quot;https://creativecommons.org/licenses/by-nc-sa/<span class="number">4.0</span>/<span class="string">&quot; target=&quot;</span>_blank<span class="string">&quot; rel=&quot;</span>noopener<span class="string">&quot;&gt;BY-NC-SA 4.0&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;许可协议。&lt;/span&gt;</span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="博文置顶"><a class="header-anchor" href="#博文置顶">¶</a>博文置顶</h3><ul><li>重新安装插件<ul><li><code>npm r hexo-generator-index</code></li><li><code>npm i hexo-generator-index-pin-top --S</code></li></ul></li><li>在博文的YAML中添加<code>top: true</code></li><li>编辑themes/next/layout/_macro/post.swig，定位到&quot;post-meta&quot;，插入如下代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;post-meta&quot;&gt;</span><br><span class="line">&#123;% if post<span class="selector-class">.top</span> %&#125;</span><br><span class="line">&lt;<span class="selector-tag">i</span> class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/<span class="selector-tag">i</span>&gt;</span><br><span class="line">    &lt;<span class="attribute">font</span> <span class="attribute">color</span>=<span class="number">7</span>D26CD&gt;置顶&lt;/<span class="attribute">font</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;post-meta-divider&quot;&gt;|&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="站点配置"><a class="header-anchor" href="#站点配置">¶</a>站点配置</h2><blockquote><p>使用Typora作为文本编辑器，参见本站文章<a href="../Typora%E6%8A%80%E5%B7%A7">Typora技巧</a></p></blockquote><h3 id="引用文章"><a class="header-anchor" href="#引用文章">¶</a>引用文章</h3><ul><li>在Hexo渲染出的网页中引用已发布的文章，首先修改站点配置文件_config.yml中的permalink</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://arvinhwo.com</span></span><br><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br></pre></td></tr></table></figure><ul><li>Typora引用使用<code>[titile](../filename_without.md)</code>的Markdown代码</li></ul><h3 id="引用图片"><a class="header-anchor" href="#引用图片">¶</a>引用图片</h3><ul><li>在blog/source/路径下新建images文件夹，.md文件放入默认位置blog/source/_posts/</li><li>将Typora-格式-设置图片根目录设置为source，体现在文章的YAML中即为<code>typora-root-url: ./..</code></li><li>将Typora-偏好设置-图片设置如下</li></ul><img src="/images/image-20250709150435441.png" alt="image-20250709150435441" style="zoom: 33%;" /><ul><li>此后Typora中和Hexo渲染均可正确显示图片</li></ul><blockquote><p>由于Gitee不允许个人使用仓库当作图床使用，也可改用GitHub图床<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>，若使用GitHub作为图床同样需要CDN加速</p></blockquote><h3 id="添加脚注"><a class="header-anchor" href="#添加脚注">¶</a>添加脚注</h3><ul><li>Hexo无法渲染Typora中的脚注，因此使用插件解决<ul><li>卸载原渲染插件<code>npm un hexo-renderer-marked --save</code></li><li>安装GitHub风格渲染插件<code>npm i hexo-renderer-markdown-it --save</code></li><li>修改站点配置文件_config.yml</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown-it config</span></span><br><span class="line"><span class="comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="comment"># 渲染设置</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="comment"># 置为true时，html内容保持不变；置为false时，html内容将被转义成普通字符串</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否生成与XHTML完全兼容的标签（虽然我不懂是什么意思）</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 置为true时，每个换行符都被渲染成一个&lt;br&gt;（即Hexo的默认表现）；置为false时，只有空行才会被渲染为&lt;br&gt;（GFM的默认表现）</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否自动识别链接并把它渲染成链接</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否自动识别印刷格式（意思是把(c)渲染为©这样的）</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 如果typographer被设置为true，则该选项用于设置将dumb quotes（&quot;&quot;）自动替换为smart quotes</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="comment"># 设置所需插件</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">  <span class="comment"># 锚点设置</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span></span><br></pre></td></tr></table></figure><h3 id="任务列表"><a class="header-anchor" href="#任务列表">¶</a>任务列表</h3><ul><li>安装GitHub风格渲染插件<code>npm install hexo-renderer-markdown-it --save</code></li><li>安装缺失依赖项<code>npm install markdown-it-task-lists --save</code></li><li>编辑站点配置配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-task-lists</span>  <span class="comment"># 启用任务列表插件</span></span><br></pre></td></tr></table></figure><h3 id="公式渲染"><a class="header-anchor" href="#公式渲染">¶</a>公式渲染</h3><ul><li>Hexo无法渲染Typora中的公式块，因此安装插件<code>npm install hexo-filter-mathjax --save</code></li><li>配置站点配置文件_config.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="标题编号"><a class="header-anchor" href="#标题编号">¶</a>标题编号</h3><ul><li>对于Hexo-NEXT渲染的html文件，默认为TOC标题自动添加编号，但是缺少对正文标题编号的自动添加，可在 themes\next\source\css\main.styl 的末尾添加</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">  <span class="selector-class">.post-body</span> &#123;<span class="attribute">counter-reset</span>: h1&#125;</span><br><span class="line">          <span class="selector-tag">h1</span> &#123;<span class="attribute">counter-reset</span>: h2&#125;</span><br><span class="line">          <span class="selector-tag">h2</span> &#123;<span class="attribute">counter-reset</span>: h3&#125;</span><br><span class="line">          <span class="selector-tag">h3</span> &#123;<span class="attribute">counter-reset</span>: h4&#125;</span><br><span class="line">          <span class="selector-tag">h4</span> &#123;<span class="attribute">counter-reset</span>: h5&#125;</span><br><span class="line">          <span class="selector-tag">h5</span> &#123;<span class="attribute">counter-reset</span>: h6&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-body</span> &#123;</span><br><span class="line">  <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">counter-increment</span>: h1; <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;. &quot;</span>&#125;</span><br><span class="line">  <span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">counter-increment</span>: h2; <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;. &quot;</span>&#125;</span><br><span class="line">  <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">counter-increment</span>: h3; <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;. &quot;</span>&#125;</span><br><span class="line">  <span class="selector-tag">h4</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">counter-increment</span>: h4; <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;. &quot;</span>&#125;</span><br><span class="line">  <span class="selector-tag">h5</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">counter-increment</span>: h5; <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;. &quot;</span>&#125;</span><br><span class="line">  <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">counter-increment</span>: h6; <span class="attribute">content</span>: <span class="built_in">counter</span>(h1) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h2) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h3) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h4) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h5) <span class="string">&quot;.&quot;</span> <span class="built_in">counter</span>(h6) <span class="string">&quot;. &quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/103325381">Git安装教程</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://blog.csdn.net/qq_35246620/article/details/54317740">SSH的原理及其应用</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/87732909">常用git命令</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://www.runoob.com/git/git-branch.html">Git分支管理</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://blog.csdn.net/antma/article/details/86104068">node.js安装步骤</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://hexo.io/docs/">Hexo使用文档</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/106060640">NEXT优化1</a>；<a href="https://choubin.site/2019/12/30/CustomBlogTheme/">NEXT优化2</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li><li id="fn8" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/138012354">Blog使用GitHub图床</a> <a href="#fnref8" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora技巧</title>
      <link href="/Typora%E6%8A%80%E5%B7%A7/"/>
      <url>/Typora%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1>Typora技巧</h1><h2 id="编辑"><a class="header-anchor" href="#编辑">¶</a>编辑</h2><ul><li>撤销：<code>ctrl</code>+<code>z</code></li><li>取消撤销：<code>ctrl</code>+<code>y</code></li><li>跳转至光标位置：<code>ctrl</code>+<code>j</code></li><li>跳转至顶部：<code>ctrl</code>+<code>home</code></li><li>跳转至底部：<code>ctrl</code>+<code>end</code></li><li>替代：<code>ctrl</code>+<code>h</code></li><li>查找下一个：<code>enter</code></li><li>查找上一个：<code>shift</code>+<code>enter</code></li><li>选择词：<code>ctrl</code>+<code>d</code></li><li>删除词：<code>ctrl</code>+<code>shift</code>+<code>d</code></li><li>选择行(表格中)/句子(句号或回车)：<code>ctrl</code>+<code>l</code></li><li>删除行(表格中)：<code>ctrl</code>+<code>shift</code>+<code>backspace</code></li><li>选择表格中单元格/段落中同格式：<code>ctrl</code>+<code>e</code></li></ul><h2 id="格式"><a class="header-anchor" href="#格式">¶</a>格式</h2><ul><li><strong>加粗</strong>：快捷键<code>ctrl</code>+<code>b</code><br>源代码：<code>**strong**</code></li><li><em>斜体</em>：快捷键<code>ctrl</code>+<code>i</code><br>源代码：<code>*emphasis*</code></li><li><u>下划线</u>：快捷键<code>ctrl</code>+<code>u</code></li><li><s>删除线</s>：快捷键<code>alt</code>+<code>shift</code>+<code>5</code></li><li><code>代码</code>：快捷键<code>ctrl</code>+<code>shift</code>+<code>反单引号</code><br>源代码：<code>反单引号 code 反单引号</code></li></ul><blockquote><p>以上格式均支持先快捷键后输入文本，及先输入文件后快捷键</p></blockquote><h2 id="标题"><a class="header-anchor" href="#标题">¶</a>标题</h2><ul><li>设置标题：<code>ctrl</code>+<code>1~6</code><br>源代码：<code>#</code>+<code>Space</code>+Heading</li><li>标题升级：<code>ctrl</code>+<code>=</code></li><li>标题降级：<code>ctrl</code>+<code>-</code></li><li>取消标题：<code>ctrl</code>+<code>0</code></li></ul><h2 id="段落"><a class="header-anchor" href="#段落">¶</a>段落</h2><ul><li>新段落：<code>enter</code></li><li>同段落新行：<code>shift</code>+<code>enter</code></li><li>缩进：<code>ctrl</code>+<code>[</code> 或 <code>tab</code></li><li>减少缩进：<code>ctrl</code>+<code>]</code> 或 <code>shift</code>+ <code>tab</code></li></ul><h2 id="列表"><a class="header-anchor" href="#列表">¶</a>列表</h2><h3 id="无序列表"><a class="header-anchor" href="#无序列表">¶</a>无序列表</h3><ul><li>快捷键：<code>ctrl</code>+<code>shift</code>+<code>]</code><br>源代码：<code>*</code>/<code>+</code>/<code>-</code>+<code>Space </code>+ Paragraph</li><li>设置子列表等同缩进<br>取消子列表等同取消缩进</li></ul><blockquote><p>无序列表示例：</p><ul><li>段落1 (Enter)</li><li>段落2行1 (Shift+Enter)<br>段落2行2</li><li>段落3<ul><li>子列表段落1</li></ul></li></ul></blockquote><h3 id="有序列表"><a class="header-anchor" href="#有序列表">¶</a>有序列表</h3><ul><li>快捷键：<code>ctrl</code>+<code>shift</code>+<code>[</code><br>源代码：<code>1.</code> +<code>Space </code>+ Paragraph</li></ul><blockquote><p>有序列表示例：</p><ol><li>有序段落1<ol><li>有序段落1.1<ol><li>有序段落1.1.1</li></ol></li></ol></li></ol></blockquote><h3 id="任务列表"><a class="header-anchor" href="#任务列表">¶</a>任务列表</h3><ul><li>任务列表：<code>ctrl</code>+<code>shift</code>+<code>x</code></li></ul><blockquote><p>任务列表示例：</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 任务1</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 任务2</li></ul></blockquote><h2 id="功能"><a class="header-anchor" href="#功能">¶</a>功能</h2><h3 id="区块"><a class="header-anchor" href="#区块">¶</a>区块</h3><ul><li>段落引用：<code>ctrl</code>+<code>shift</code>+<code>Q</code><br>源代码：<code>&gt;</code>+<code>Space</code></li><li>取消引用等同取消缩进</li></ul><blockquote><p>引用区块示例，用于进一步解释段落中的内容</p></blockquote><h3 id="链接"><a class="header-anchor" href="#链接">¶</a>链接</h3><ul><li>将链接复制入剪切板后：<code>ctrl</code>+<code>k</code><br>源代码：<code>[titile](url)</code> or <code>[titile](#handing)</code></li></ul><blockquote><p>示例：<br>网页跳转：<a href="https://support.typora.io/Shortcut-Keys/#change-shortcut-keys">Typora快捷键</a><br>文内跳转：标题-<a href="#%E7%BC%96%E8%BE%91">编译</a><br>本地文件跳转同理</p></blockquote><ul><li>此外，提供另一种显示链接的方法，便于集中管理所有链接：<ul><li>源代码：<code>[titile][]</code></li><li>UI界面：段落-&gt;链接引用，再补全<code>[titile]:link url &quot;optional&quot;</code></li></ul></li></ul><blockquote><p><a href="https://blog.csdn.net/he_nan/article/details/105850141" title="网页名称可选">链接测试</a></p></blockquote><h3 id="脚注"><a class="header-anchor" href="#脚注">¶</a>脚注</h3><ul><li>脚标源代码：<code>[^1]</code></li><li>脚注代码：<code>[^1]:脚注</code><br>脚注UI：段落-&gt;脚注</li></ul><blockquote><p>示例：<br>使用脚注对于正文扩展进行说明<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><br>在Typora的编辑中，可将脚标与脚注放在一起<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p></blockquote><ul><li>自定义快捷键<ul><li>打开文件-偏好设置-通用-高级设置</li><li>配置conf.user.json文件，配置以下快捷键</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;keyBinding&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Footnotes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ctrl+Shift+P&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h3><ul><li>段落内代码<br>快捷键：<code>ctrl</code>+<code>shift</code>+<code>反单引号</code><br>源代码：<code>反单引号 code 反单引号</code></li><li>代码块<br>快捷键：<code>ctrl</code>+<code>shift</code>+<code>k</code><br>源代码：<code>三反单引号 code block 三反单引号</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageGrab</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_to_base64</span>(<span class="params">image</span>):</span><br><span class="line">    buffered = io.BytesIO()</span><br><span class="line">    image.save(buffered, <span class="built_in">format</span>=<span class="string">&quot;PNG&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(buffered.getvalue()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image = ImageGrab.grabclipboard()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(image, Image.Image):</span><br><span class="line">            base64_image = image_to_base64(image)</span><br><span class="line">            pyperclip.copy(<span class="string">f&quot;![image](data:image/png;base64,<span class="subst">&#123;base64_image&#125;</span>)\n&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;图像已转换为Base64并复制&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        raw_path = pyperclip.paste().strip(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">        file_path = os.path.normpath(raw_path)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            <span class="keyword">with</span> Image.<span class="built_in">open</span>(file_path) <span class="keyword">as</span> img:</span><br><span class="line">                base64_image = image_to_base64(img)</span><br><span class="line">            pyperclip.copy(<span class="string">f&quot;![image](data:image/png;base64,<span class="subst">&#123;base64_image&#125;</span>)\n&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文件图像已转换为Base64并复制&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;剪切板无有效图像或文件&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="公式"><a class="header-anchor" href="#公式">¶</a>公式</h3><ul><li>快捷键：<code>ctrl</code>+<code>shift</code>+<code>m</code><br>源代码：<code>$$math bock$$</code></li></ul><blockquote><p>公式示例-薛定谔方程（一维定态）</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>&gt;</mo><mo>−</mo><mfrac><msup><mi mathvariant="normal">ℏ</mi><mn>2</mn></msup><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mfrac><mrow><msup><mi>d</mi><mn>2</mn></msup><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mi>V</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&gt; -\frac{\hbar^2}{2m}\frac{d^2\psi(x)}{dx^2} + V(x)\psi(x) = E\psi(x)&gt; </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">ℏ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span></span></span></span></blockquote><h3 id="图片"><a class="header-anchor" href="#图片">¶</a>图片</h3><ul><li>快捷键：<code>ctrl</code>+<code>shift</code>+<code>i</code>或复制后直接<code>ctrl</code>+<code>v</code><br>源代码：<code>![titile](url/localpath)</code></li></ul><img src="/images/image-20250709141106758.png" alt="image-20250709141106758" style="zoom: 33%;" /><ul><li>设置本地图片副本存储位置</li><li>使用PicGo图床上传，在Gitee保存图片副本<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><ul><li>安装<a href="https://nodejs.org/en/">Node.js</a></li><li>注册<a href="https://gitee.com/">Gitee</a></li><li>新建开源Gitee<a href="https://gitee.com/arvinhwo/typoraimage">仓库</a></li><li>生成Gitee<a href="D:%5CDocument%5CPassword.txt">私人令牌</a></li><li>在Typora中下载<a href="C:%5CUsers%5Carvin%5CAppData%5CRoaming%5CTypora%5Cpicgo">PicGo-Core</a></li><li>打开配置文件</li><li>验证图片上传选项</li></ul></li><li>点击格式-图像-上传所有本地图片批量上传</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitee&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;gitee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;仓库地址（不带gitee的域名）&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitee 私人令牌 必填&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;自定义存储路径，可以不填&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;域名，没有可以不填&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;分支名，默认是 master&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-gitee-uploader&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;picgo-plugin-super-prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYYMMDDHHmmss&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><img src="/images/image-20250709142115308.png" alt="image-20250709142115308" style="zoom:50%;" /><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>脚注可用于解释英文缩略词等 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>脚注在导出HTML中会按顺序在文末 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://juejin.cn/post/7089308017266524197">PicGo-Gitee参考教程</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 操作指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
